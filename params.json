{"name":"Rsl switch","tagline":"How to - Wie mache ich es","body":"# Hallo\r\n\r\nHier möchte ich zeigen wie man einen Conrad RSL Switch mit dem Photon Particle steuert.\r\n\r\nEin Conrad RSL Switch ist eine per Funk gesteuerte Steckdose. (siehe www.conrad.de)\r\n\r\nBestell Nummer : 526917 - 62\r\n\r\nEs sind nicht die billigsten Dosen. Dafür haben sie aber auch bessere Eigenschaften.\r\n\r\nCool sind auch die sehr kleinen 2-Phasen Schalter : Bestell Nummer  : 640553 - 62 \r\n \r\n# Voraussetzungen\r\n\r\nDieser Artikel setzt voraus, dass Du folgendes beherrscht:\r\n\r\nPARTICLE APP auf Deinem Smartphone installieren.\r\nMit TINKER die blaue LED and D7 ein- und ausschalten\r\n\r\nBLYNK APP auf Deinem Smartphone installieren.\r\nMit der PARTICLE WEB IDE und der BLYNK Library die blaue LED and D7 ein- und ausschalten.\r\n\r\n\r\n# PARTICLE WEB IDE  \r\n\r\nIn der IDE die Library **RSL_SWITCH** suchen.\r\n\r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/select_library.PNG)\r\n\r\nDann **USE THIS EXAMPLE** auswählen\r\n\r\nErgebnis : Ein neue APP mit dem Namen **conrad-rsl-example.ino** wird erstellt.\r\n\r\nIn der IDE die Library **BLYNK** suchen.\r\n\r\nDann **INCLUDE IN APP** auswählen\r\n\r\nErgebnis: \r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/application_and_libraries.PNG)\r\n\r\n\r\n# Hardware Option 1\r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/transmitter.PNG)\r\n\r\nFolgende Verbindungen zwischen dem Particle Photon und dem AM Transmitter herstellen\r\n\r\n* ATAD and Photon pin D1\r\n* GND an Photon pin GND\r\n* VCC an Photon pin VIN\r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/breadboard.PNG)\r\n\r\n# BLYNC APP auf dem Smartphone\r\n\r\nButtons hinzufügen und mit den virtuellen Pins verbinden.\r\n\r\nLEDs hinzufügen und mit den virtuellen Pins verbinden.\r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/blynk.PNG)\r\n\r\n\r\n# Hardware Option 2 Ein besserer AM 433 MHz Transmitter\r\n\r\nIch habe den AM Transmitter der Firma Aurel , Modell TX-SAW MID/5 V AM Sendemodule 433,92 MHz Baustein getestet.\r\n\r\nDer Grund : Dieses Sendemodule besitzt eine EC Konformitätserklärung. Das bedeutet, dass der Hersteller einige Tests durchführen lies und dies auch nachweisen kann.\r\n\r\nEs gibt ihn als 3V oder 5V Variante. Die 3V Variante kann auch direkt mit einem Raspberry PI verbunden werden.\r\n\r\nConrad Bestell Nummer : 191525 - 62 \r\n\r\n# CODE review\r\n\r\nDer pin ATAD wird in rsl_switch.cpp bestimmt.\r\n\r\n    // mit diesem Pin wird der sender gesteuert.\r\n    // this pin is used to control the RF transmitter\r\n\r\n    int dpin = D1;\r\n\r\nBeim starten des Programms muss conrad_rsl_init() aufgerufen werden:\r\n\r\n   /*--------------------------------------------------------\r\n    Diese Funktion muss einmal von setup() aufgerufen werden\r\n    call this function once from setup()\r\n    ---------------------------------------------------------*/\r\n\r\n    void conrad_rsl_init()\r\n    {\r\n       pinMode(dpin,OUTPUT);\r\n       digitalWrite(dpin,LOW);\r\n       delay(500);\r\n    }\r\n\r\nDer CODE zum steuern einer Funk Dose, hier ein Beispiel:\r\n\r\n\"00001110011001001011010000000000\" ist ein Code den eine RSL Fernsteuerung sendet.\r\nDie Anführungsstriche bedeuten, dass es sich um eine Zeichenfolge handelt und nicht um ein Zahl.\r\n\r\nDer CODE wird in der Funktion conrad_rsl_switch() verwendet.\r\n\r\nvoid conrad_rsl_switch ( int which, int state )\r\n  {\r\n    char es[34];  // code als Zeichenfolge\r\n\r\n    memset(es,0,34);\r\n\r\n    switch (which) {\r\n     case 1: //  schalter nummer 1 \r\n       if (state==EIN)  strncpy(es,\"00001110011001001011010000000000\",32);\r\n       if (state==AUS)  strncpy(es,\"00000001011001001011010000000000\",32);\r\n       break;\r\n       \r\n     --- snip ---\r\n\r\n     case 5: // schalter nummer 2\r\n       if (state==EIN)  strncpy(es,\"00000101000001001100000011010111\",32);\r\n       if (state==AUS)  strncpy(es,\"00001101000001001100000011010111\",32);\r\n       break;\r\n       \r\n     default: \r\n       Serial.print(\" Fehler : konnte Code nicht finden \");\r\n     break;\r\n   }\r\n\r\n   Serial.print(\"Sende Code : \");\r\n   Serial.println(es);\r\n   conrad_rsl_send(es,430,1150);\r\n  }\r\n\r\nEin Beispiel für die Funktion wenn Button 1 gedrückt wurde:\r\n\r\n    // Verbinde auf der BLYNC APP den Button mit Virtual pin 1\r\n    BLYNK_WRITE(V1)\r\n    {\r\n        if (param.asInt() == 1) // Schalter nieder gedrückt ?\r\n        {\r\n          println(\" rsl dose 1 ein \");\r\n          conrad_rsl_switch(DOSE1,1);\r\n          Blynk.virtualWrite(V11,255);  // V11 ist eine BLYNC APP LED\r\n        }\r\n    }\r\n\r\n# Codes aufzeichnen\r\n\r\nIm Auslieferungszustand besitzen die Funk Dosen noch keine Code Sequenz, mit denen sie geschaltet werden. Sie lernen den Code indem man sie mit der Fernsteuerung anlernt. \r\nNachdem die Funk Dose die Code Sequenz der Fernsteuerung gelernt hat, müssen wir die Code Sequenz in der Datei …cpp eintragen.\r\nDie Code Sequenz erhalten wir, wenn wir die Fernsteuerung mit dem AM433MHz Empfänger abhören.\r\n\r\n# Software\r\n\r\nIn der Particle IDE die Library **RCSWITCH** suchen.\r\n\r\nDie Datei **RECEIVEDEMO_ADVANCED.INO** auswählen\r\n\r\nUSE THIS EXAMPLE anklicken\r\n\r\nErgebnis : Eine APP mit dem Namen **RECEIVEDDEMO_ADVANCED** wird erstellt.\r\n\r\n# Hardware\r\n\r\nFolgende Verbindungen zwischen dem AM433MHz Empfänger und dem Particle Photon herstellen:\r\n \r\n* DATA an Photon pin D3\r\n* GND an Photon pin GND\r\n* VCC and Photon pin VIN\r\n* USB des Photons mit einem USB Anschluss am Computer verbinden. Dadurch erhält man Zugang zur seriellen Schnittstelle des Photons.\r\n\r\n# Codes aufzeichnen\r\n\r\nDas Programm auf den Photon flashen.\r\n\r\nEin Terminal Program mit der seriellen Schnittstelle verbinden.\r\n\r\nAuf der Fernbedienung einen Taster drücken. Auf der Terminal wird der Code angezeigt.\r\n\r\nDiesen Code in die Datei rsl_switch übertragen.\r\n\r\n![](http://df3xc.github.io/rsl_switch/pictures/TeratermCode.PNG)\r\n\r\n \r\n\r\n# Weiterführende Literatur\r\n\r\nNun hast DU eine Art Funkanalage selber gebaut. \r\n\r\n* Darfst Du (die Person) diese Funkanalage betreiben: Hast Du eine Lizenz?\r\n* Darf die Funkanlage (das Gerät) betrieben werden : Hat das Gerät eine Zulassung?\r\n\r\nSo manch ein Motorradfahrer scheitert ja kläglich, wenn es an sein Eisenpferd ein Auspuff ohne ABE montiert, nicht wahr ?\r\n\r\nDaher mal als Einführung: \r\n[SRD Funkanalagen](http://www.bundesnetzagentur.de/SharedDocs/Downloads/DE/Sachgebiete/Telekommunikation/Unternehmen_Institutionen/Frequenzen/Allgemeinzuteilungen/2014_69_SRD_pdf.pdf?__blob=publicationFile&v=1)\r\n\r\nSoweit ich das verstehe : \r\n\r\n* Der Einsatz einer Richtantenne ist nicht erlaubt. Das würde dazu führen, das ERP überschritten wird.\r\n* Eine andauernde Sendung durch die SW ist nicht erwünscht, weil es alle anderen Geräte - auch die der lieben Nachbarn - stören kann. Die Geräte benutzen ja alle die gleiche Frequenz.\r\n\r\n\r\n# Viel Spaß\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}